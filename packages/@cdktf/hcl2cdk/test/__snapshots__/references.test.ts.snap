// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`references aliased duplicate provider with var reference snapshot typescript 1`] = `
"import { Construct } from "constructs";
import { TerraformVariable, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Auth0Provider } from "./.gen/providers/auth0/provider";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    const clientId = new TerraformVariable(this, "client_id", {
      description: "A client_id",
    });
    const clientSecret = new TerraformVariable(this, "client_secret", {
      description: "A client_secret",
    });
    const domain = new TerraformVariable(this, "domain", {
      description: "A domain",
    });
    new Auth0Provider(this, "auth0", {
      clientId: clientId.stringValue,
      clientSecret: clientSecret.stringValue,
      domain: domain.stringValue,
    });
    new Auth0Provider(this, "auth0_4", {
      alias: "private_auth0",
      clientId: clientId.stringValue,
      clientSecret: clientSecret.stringValue,
      debug: true,
      domain: domain.stringValue,
    });
  }
}
"
`;

exports[`references data local_file snapshot typescript 1`] = `
"import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataLocalFile } from "./.gen/providers/local/data-local-file";
import { LocalProvider } from "./.gen/providers/local/provider";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new LocalProvider(this, "local", {});
    new DataLocalFile(this, "_01_please_verify", {
      filename: "./email_templates/01_please_verify/template.html",
    });
  }
}
"
`;

exports[`references provider with var reference snapshot typescript 1`] = `
"import { Construct } from "constructs";
import { TerraformVariable, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running \`cdktf get\`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Auth0Provider } from "./.gen/providers/auth0/provider";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    const domain = new TerraformVariable(this, "domain", {
      description: "A domain",
    });
    new Auth0Provider(this, "auth0", {
      clientId: "client_id",
      clientSecret: "client_secret",
      domain: domain.stringValue,
    });
  }
}
"
`;

exports[`references resources with splat expressions should work snapshot typescript 1`] = `
"import { Construct } from "constructs";
import {
  VariableType,
  TerraformVariable,
  TerraformOutput,
  propertyAccess,
  TerraformStack,
} from "cdktf";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    const keyValuePairs = new TerraformVariable(this, "key_value_pairs", {
      default: [
        {
          bar: "not food",
          foo: "foo",
        },
        {
          bar: "not beer",
          foo: "bar",
        },
      ],
      description: "List of key value pairs",
      type: VariableType.list(
        VariableType.object({
          bar: VariableType.STRING,
          foo: VariableType.STRING,
        })
      ),
    });
    new TerraformOutput(this, "values", {
      value: propertyAccess(keyValuePairs.value, ["*", "bar"]),
    });
  }
}
"
`;
